package commands.strategies.intergration;

import commands.RedisTestContainer;
import io.lettuce.core.Range;
import io.lettuce.core.RedisCommandExecutionException;
import io.lettuce.core.StreamMessage;
import io.lettuce.core.XAddArgs;
import io.lettuce.core.api.sync.RedisCommands;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.List;
import java.util.Map;
import java.util.stream.Stream;

import static commands.Errors.STREAM_ID_LOWER;
import static commands.Errors.STREAM_ID_NOT_ALLOWED;
import static org.junit.jupiter.api.Assertions.*;

public class XADDStrategyTest extends RedisTestContainer {

    private static RedisCommands<String, String> client;
    private static final String KEY = "streamKey";

    @BeforeEach
    void init() {
        client = registerClient();
        client.del(KEY);
    }

    @Test
    void shouldSucceedWithAutoGeneratedIdForNewStream() {
        // given
        var fields = Map.of("field1", "value1");

        // when
        String addedId = client.xadd(KEY, fields);

        // then
        assertNotNull(addedId);
        List<StreamMessage<String, String>> messages =
                client.xrange(KEY, Range.create(addedId, addedId));
        assertEquals(1, messages.size());
        assertEquals(addedId, messages.getFirst().getId());
        assertEquals(fields, messages.getFirst().getBody());
    }

    @Test
    void shouldSucceedWithAutoGeneratedIdForExistingStream() {
        var fields = Map.of("field2", "value2");
        String id2 = client.xadd(KEY, fields);

        assertNotNull(id2);
        List<StreamMessage<String, String>> messages =
                client.xrange(KEY, Range.create(id2, id2));
        assertEquals(1, messages.size());
        assertEquals(id2, messages.getFirst().getId());
        assertEquals(fields, messages.getFirst().getBody());
    }

    @ParameterizedTest
    @MethodSource("generateValidIds")
    void shouldSucceedWithExplicitId(String streamKey, String streamId, Map<String, String> fields) {
        client.xadd(streamKey, new XAddArgs().id(streamId), fields);

        List<StreamMessage<String, String>> messages =
                client.xrange(streamKey, Range.create(streamId, streamId));
        assertEquals(1, messages.size());
        assertEquals(streamId, messages.getFirst().getId());
        assertEquals(fields, messages.getFirst().getBody());
    }

    private static Stream<Arguments> generateValidIds() {
        return Stream.of(
                Arguments.of("streamKey1", "0-1", Map.of("key", "val")),
                Arguments.of("streamKey2", "1-0", Map.of("key", "val")),
                Arguments.of("streamKey3", "1526919030473-1", Map.of("key", "val"))
        );
    }

    @Test
    void shouldSucceedWithMultipleFields() {
        var fields = Map.of(
                "temp", "25",
                "humidity", "60",
                "sensorId", "A23"
        );

        String addedId = client.xadd(KEY, fields);

        assertNotNull(addedId);
        List<StreamMessage<String, String>> messages =
                client.xrange(KEY, Range.create(addedId, addedId));
        assertEquals(1, messages.size());
        assertEquals(addedId, messages.getFirst().getId());
        assertEquals(fields, messages.getFirst().getBody());
    }

    @Test
    void shouldSucceedWithZeroTimestampId() {
        var fields = Map.of("key", "val");

        String addedId = client.xadd(KEY, new XAddArgs().id("0-1"), fields);

        assertEquals("0-1", addedId);
        List<StreamMessage<String, String>> messages =
                client.xrange(KEY, Range.create(addedId, addedId));
        assertEquals(1, messages.size());
    }

    @Test
    void shouldFailWithIdThatIsLowerThanLastId() {
        client.xadd(KEY, new XAddArgs().id("10-5"), Map.of("key", "val"));

        var streamId = new XAddArgs().id("10-4");
        var fields = Map.of("key", "val");
        assertThrows(RedisCommandExecutionException.class,
                () -> client.xadd(KEY, streamId, fields),
                STREAM_ID_LOWER
        );
    }

    @Test
    void shouldFailWithInvalidTimestamp() {
        var streamId = new XAddArgs().id("9-6");
        var fields = Map.of("key", "val");

        client.xadd(KEY, new XAddArgs().id("10-5"), fields);

        assertThrows(RedisCommandExecutionException.class,
                () -> client.xadd(KEY, streamId, fields),
                STREAM_ID_LOWER
        );
    }

    @Test
    void shouldFailWithInvalidIdFormat() {
        var streamId = new XAddArgs().id("0-0");
        var fields = Map.of("key", "val");
        assertThrows(RedisCommandExecutionException.class,
                () -> client.xadd(KEY, streamId, fields),
                STREAM_ID_NOT_ALLOWED
        );
    }
}
